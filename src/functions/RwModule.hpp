// Auto-generated by compile-delayed-module from ../src/functions/RwModule.xq
// DO NOT EDIT

// ../src/functions/RwModule.xq
static const XMLCh rw_file[] = { 46, 46, 47, 115, 114, 99, 47, 102, 117, 110, 99, 116, 105, 111, 110, 115, 47, 82, 119, 77, 111, 100, 117, 108, 101, 46, 120, 113, 0 };

// rw
static const XMLCh rw_prefix[] = { 114, 119, 0 };

// http://xqilla.sourceforge.net/rewrite
static const XMLCh rw_uri[] = { 104, 116, 116, 112, 58, 47, 47, 120, 113, 105, 108, 108, 97, 46, 115, 111, 117, 114, 99, 101, 102, 111, 114, 103, 101, 46, 110, 101, 116, 47, 114, 101, 119, 114, 105, 116, 101, 0 };

static const DelayedModule::Decl rw_declarations[] = {
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 26, 25,
    "rw:MulMulTransFold: ((~A * ~B) * ~C)\n"
    "  where rw:is-constant(~C) and (rw:subtype(~this, 'xs:decimal?') or\n"
    "    rw:subtype(~this, 'xs:float?') or rw:subtype(~this, 'xs:double?'))\n"
    "-> ((~A * ~C) * ~B) where rw:is-constant(~A) and not(rw:is-constant(~B))\n"
    "-> (~A * (~C * ~B)) where rw:is-constant(~B) and not(rw:is-constant(~A))"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 31, 25,
    "rw:MulDivTransFold: ((~A div ~B) * ~C)\n"
    "  where rw:is-constant(~C) and (rw:subtype(~this, 'xs:decimal?') or\n"
    "    rw:subtype(~this, 'xs:float?') or rw:subtype(~this, 'xs:double?'))\n"
    "-> ((~A * ~C) div ~B) where rw:is-constant(~A) and not(rw:is-constant(~B))\n"
    "-> (~A * (~C div ~B)) where rw:is-constant(~B) and not(rw:is-constant(~A))"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 38, 25,
    "rw:DivMulTransFold: ((~A * ~B) div ~C)\n"
    "  where rw:is-constant(~C) and (rw:subtype(~this, 'xs:decimal?') or\n"
    "    rw:subtype(~this, 'xs:float?') or rw:subtype(~this, 'xs:double?')) and\n"
    "    not(rw:subtype(~A, 'xs:duration')) and not(rw:subtype(~B, 'xs:duration')) and\n"
    "    not(rw:subtype(~C, 'xs:duration'))\n"
    "-> ((~A div ~C) * ~B) where rw:is-constant(~A) and not(rw:is-constant(~B))\n"
    "-> (~A * (~B div ~C)) where rw:is-constant(~B) and not(rw:is-constant(~A))"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 45, 25,
    "rw:DivDivTransFold: ((~A div ~B) div ~C)\n"
    "  where rw:is-constant(~C) and (rw:subtype(~this, 'xs:decimal?') or\n"
    "    rw:subtype(~this, 'xs:float?') or rw:subtype(~this, 'xs:double?')) and\n"
    "    not(rw:subtype(~A, 'xs:duration')) and not(rw:subtype(~B, 'xs:duration')) and\n"
    "    not(rw:subtype(~C, 'xs:duration'))\n"
    "-> ((~A div ~C) div ~B) where rw:is-constant(~A) and not(rw:is-constant(~B))\n"
    "-> (~A div (~B * ~C)) where rw:is-constant(~B) and not(rw:is-constant(~A))"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 53, 25,
    "rw:AddAddTransFold: ((~A + ~B) + ~C)\n"
    "  where rw:is-constant(~C) and (rw:subtype(~this, 'xs:decimal?') or\n"
    "    rw:subtype(~this, 'xs:float?') or rw:subtype(~this, 'xs:double?'))\n"
    "-> ((~A + ~C) + ~B) where rw:is-constant(~A) and not(rw:is-constant(~B))\n"
    "-> (~A + (~C + ~B)) where rw:is-constant(~B) and not(rw:is-constant(~A))"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 58, 25,
    "rw:AddSubTransFold: ((~A - ~B) + ~C)\n"
    "  where rw:is-constant(~C) and (rw:subtype(~this, 'xs:decimal?') or\n"
    "    rw:subtype(~this, 'xs:float?') or rw:subtype(~this, 'xs:double?'))\n"
    "-> ((~A + ~C) - ~B) where rw:is-constant(~A) and not(rw:is-constant(~B))\n"
    "-> (~A + (~C - ~B)) where rw:is-constant(~B) and not(rw:is-constant(~A))"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 64, 25,
    "rw:SubAddTransFold: ((~A + ~B) - ~C)\n"
    "  where rw:is-constant(~C) and (rw:subtype(~this, 'xs:decimal?') or\n"
    "    rw:subtype(~this, 'xs:float?') or rw:subtype(~this, 'xs:double?'))\n"
    "-> ((~A - ~C) + ~B) where rw:is-constant(~A) and not(rw:is-constant(~B))\n"
    "-> (~A + (~B - ~C)) where rw:is-constant(~B) and not(rw:is-constant(~A))"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 69, 25,
    "rw:SubSubTransFold: ((~A - ~B) - ~C)\n"
    "  where rw:is-constant(~C) and (rw:subtype(~this, 'xs:decimal?') or\n"
    "    rw:subtype(~this, 'xs:float?') or rw:subtype(~this, 'xs:double?'))\n"
    "-> ((~A - ~C) - ~B) where rw:is-constant(~A) and not(rw:is-constant(~B))\n"
    "-> (~A - (~B + ~C)) where rw:is-constant(~B) and not(rw:is-constant(~A))"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 76, 25,
    "rw:MulZeroFold: ~e * 0 -> 0\n"
    "  where rw:subtype(~e, 'xs:decimal?')"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 78, 25,
    "rw:MulOneFold: ~e * 1 -> ~e\n"
    "  where rw:subtype(~this, 'xs:decimal?') or rw:subtype(~this, 'xs:float?') or\n"
    "    rw:subtype(~this, 'xs:double?')"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 81, 25,
    "rw:DivOneFold: ~e div 1 -> ~e\n"
    "  where rw:subtype(~e, 'xs:decimal?') or rw:subtype(~this, 'xs:float?') or\n"
    "    rw:subtype(~this, 'xs:double?')"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 84, 25,
    "rw:AddZeroFold: ~e + 0 -> ~e\n"
    "  where rw:subtype(~e, 'xs:decimal?') or rw:subtype(~this, 'xs:float?') or\n"
    "    rw:subtype(~this, 'xs:double?')"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 87, 25,
    "rw:SubZeroFold: ~e - 0 -> ~e\n"
    "  where rw:subtype(~e, 'xs:decimal?') or rw:subtype(~this, 'xs:float?') or\n"
    "    rw:subtype(~this, 'xs:double?')"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 90, 25,
    "rw:ZeroSubFold: 0 - ~e -> - ~e\n"
    "  where rw:subtype(~e, 'xs:decimal?') or rw:subtype(~this, 'xs:float?') or\n"
    "    rw:subtype(~this, 'xs:double?')"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 94, 25,
    "rw:AddEmptyFold: ~e + () -> ()"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 95, 25,
    "rw:SubEmptyFold1: ~e - () -> ()"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 96, 25,
    "rw:SubEmptyFold2: () - ~e -> ()"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 97, 25,
    "rw:MulEmptyFold: ~e * () -> ()"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 98, 25,
    "rw:DivEmptyFold1: ~e div () -> ()"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 99, 25,
    "rw:DivEmptyFold2: () div ~e -> ()"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 100, 25,
    "rw:IDivEmptyFold1: ~e idiv () -> ()"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 101, 25,
    "rw:IDivEmptyFold2: () idiv ~e -> ()"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 102, 25,
    "rw:ModEmptyFold1: ~e mod () -> ()"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 103, 25,
    "rw:ModEmptyFold2: () mod ~e -> ()"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 104, 25,
    "rw:UnaryMinusEmptyFold: -() -> ()"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 110, 25,
    "rw:IfTrueFold: if(true()) then ~then else ~else -> ~then"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 111, 25,
    "rw:IfFalseFold: if(false()) then ~then else ~else -> ~else"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 112, 25,
    "rw:BooleanIfElseTrue: if(~condition) then ~then else true()\n"
    "-> (not(~condition) or ~then) where rw:subtype(~then, 'xs:boolean?')"
  },
  {
    DelayedModule::Decl::REWRITE_RULE, "", 0, false, 114, 25,
    "rw:BooleanIfThenTrue: if(~condition) then true() else ~else\n"
    "-> (~condition or ~else) where rw:subtype(~else, 'xs:boolean?')"
  },
  { DelayedModule::Decl::NONE, 0, 0, 0, 0, 0 }
};

static const DelayedModule rw_module = { rw_file, rw_prefix, rw_uri, rw_declarations };
