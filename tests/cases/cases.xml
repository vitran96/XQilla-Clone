<test-suite version="$Id$"
            ResultOffsetPath="./"
            XQueryQueryOffsetPath="./"
            XQueryFileExtension=".xq">

  <test-suite-info> 
    <title>XQilla XQuery Test Suite</title> 
  </test-suite-info> 

  <sources>
<!--     <source ID="category" FileName="TestSources/category.xml"/> -->

    <schema ID="schema1" uri="" FileName="schema/schema1.xsd"/>

    <module ID="functional" FileName="hofunctions/functional"/>

<!--     <collection ID="categoryCollection"> -->
<!--       <input-document>category</input-document> -->
<!--     </collection> -->
  </sources>

  <test-group name="schema">
    <GroupInfo>
      <title>Tests for schema validation</title>
    </GroupInfo>
    <test-case name="schema1" FilePath="schema/">
      <query name="schema1"/>
      <output-file compare="Fragment">schema1.out</output-file>
    </test-case>
  </test-group>

  <test-group name="regex">
    <GroupInfo>
      <title>Tests for regular expression support</title>
    </GroupInfo>
    <test-case name="regex1" FilePath="regex/">
      <query name="regex1"/>
      <output-file compare="Fragment">regex1.out</output-file>
    </test-case>
    <test-case name="regex2" FilePath="regex/">
      <query name="regex2"/>
      <output-file compare="Fragment">regex2.out</output-file>
    </test-case>
    <test-case name="regex3" FilePath="regex/">
      <query name="regex3"/>
      <output-file compare="Fragment">regex3.out</output-file>
    </test-case>
    <test-case name="regex4" FilePath="regex/">
      <query name="regex4"/>
      <output-file compare="Fragment">regex4.out</output-file>
    </test-case>
    <test-case name="regex5" FilePath="regex/">
      <query name="regex5"/>
      <output-file compare="Fragment">regex5.out</output-file>
    </test-case>
    <test-case name="regex6" FilePath="regex/">
      <query name="regex6"/>
      <output-file compare="Fragment">regex6.out</output-file>
    </test-case>
    <test-case name="regex7" FilePath="regex/">
      <query name="regex7"/>
      <output-file compare="Fragment">regex7.out</output-file>
    </test-case>
    <test-case name="regex8" FilePath="regex/">
      <query name="regex8"/>
      <output-file compare="Fragment">regex8.out</output-file>
    </test-case>
    <test-case name="regex9" FilePath="regex/">
      <query name="regex9"/>
      <output-file compare="Fragment">regex9.out</output-file>
    </test-case>
  </test-group>

  <test-group name="hofunctions">
    <GroupInfo>
      <title>Tests for higher order functions</title>
    </GroupInfo>
    <test-case name="hofunctions1" FilePath="hofunctions/">
      <query name="hofunctions1"/>
      <output-file compare="Fragment">hofunctions1.out</output-file>
    </test-case>
    <test-case name="hofunctions2" FilePath="hofunctions/">
      <module namespace="http://snelson.org.uk/functions/functional">functional</module>
      <query name="curry"/>
      <output-file compare="Fragment">curry.out</output-file>
    </test-case>
    <test-case name="hofunctions3" FilePath="hofunctions/">
      <module namespace="http://snelson.org.uk/functions/functional">functional</module>
      <query name="fibonacci"/>
      <output-file compare="Fragment">fibonacci.out</output-file>
    </test-case>
    <test-case name="hofunctions4" FilePath="hofunctions/">
      <query name="hof4"/>
      <output-file compare="Fragment">hof4.out</output-file>
    </test-case>
  </test-group>

  <test-group name="tailcall">
    <GroupInfo>
      <title>Tests for tail calls</title>
    </GroupInfo>
    <test-case name="tailcall1" FilePath="tailcall/">
      <query name="tailcall"/>
      <output-file compare="Fragment">tailcall.out</output-file>
    </test-case>
  </test-group>

  <test-group name="exslt">
    <GroupInfo>
      <title>Tests for EXSLT functions</title>
    </GroupInfo>
    <test-group name="math">
      <GroupInfo>
        <title>Tests for EXSLT math functions</title>
      </GroupInfo>
      <test-case name="math1" FilePath="exslt/math/">
        <query name="math1"/>
        <output-file compare="Fragment">math1.out</output-file>
      </test-case>
    </test-group>
  </test-group>

  <test-group name="bug-regression">
    <GroupInfo>
      <title>Regression tests for bugs found</title>
    </GroupInfo>
    <test-case name="bug1" FilePath="bugs/">
      <!-- Context item static type bug -->
      <query name="bug1"/>
      <expected-error>XPDY0002</expected-error>
    </test-case>
    <test-case name="bug2" FilePath="bugs/">
      <!-- Context item static type bug -->
      <query name="bug2"/>
      <expected-error>XPDY0002</expected-error>
    </test-case>
    <test-case name="bug3" FilePath="bugs/">
      <!-- Math identity bug -->
      <query name="bug3"/>
      <output-file compare="Fragment">bug3.out</output-file>
    </test-case>
    <test-case name="bug4" FilePath="bugs/">
      <!-- Transform a document node bug -->
      <query name="bug4"/>
      <output-file compare="Fragment">bug4.out</output-file>
    </test-case>
  </test-group>

  <test-group name="unicode">
    <GroupInfo>
      <title>Tests for unicode support</title>
    </GroupInfo>
    <test-group name="normalize">
      <GroupInfo>
        <title>Tests for normalize-unicode</title>
      </GroupInfo>
      <test-case name="normalize1" FilePath="unicode/normalize">
        <query name="normalize1"/>
        <output-file compare="Fragment">normalize1.out</output-file>
      </test-case>
      <test-case name="normalize2" FilePath="unicode/normalize">
        <query name="normalize2"/>
        <output-file compare="Fragment">normalize2.out</output-file>
      </test-case>
      <test-case name="normalize3" FilePath="unicode/normalize">
        <query name="normalize3"/>
        <output-file compare="Fragment">normalize3.out</output-file>
      </test-case>
      <test-case name="normalize4" FilePath="unicode/normalize">
        <query name="normalize4"/>
        <output-file compare="Fragment">normalize4.out</output-file>
      </test-case>
      <test-case name="normalize5" FilePath="unicode/normalize">
        <query name="normalize5"/>
        <output-file compare="Fragment">normalize5.out</output-file>
      </test-case>
      <test-case name="normalize6" FilePath="unicode/normalize">
        <query name="normalize6"/>
        <output-file compare="Fragment">normalize6.out</output-file>
      </test-case>
      <test-case name="normalize7" FilePath="unicode/normalize">
        <query name="normalize7"/>
        <output-file compare="Fragment">normalize7.out</output-file>
      </test-case>
      <test-case name="normalize8" FilePath="unicode/normalize">
        <query name="normalize8"/>
        <output-file compare="Fragment">normalize8.out</output-file>
      </test-case>
      <test-case name="normalize9" FilePath="unicode/normalize">
        <query name="normalize9"/>
        <output-file compare="Fragment">normalize9.out</output-file>
      </test-case>
      <test-case name="normalize10" FilePath="unicode/normalize">
        <query name="normalize10"/>
        <output-file compare="Fragment">normalize10.out</output-file>
      </test-case>
      <test-case name="normalize11" FilePath="unicode/normalize">
        <query name="normalize11"/>
        <output-file compare="Fragment">normalize11.out</output-file>
      </test-case>
      <test-case name="normalize12" FilePath="unicode/normalize">
        <query name="normalize12"/>
        <output-file compare="Fragment">normalize12.out</output-file>
      </test-case>
      <test-case name="normalize13" FilePath="unicode/normalize">
        <query name="normalize13"/>
        <output-file compare="Fragment">normalize13.out</output-file>
      </test-case>
      <test-case name="normalize14" FilePath="unicode/normalize">
        <query name="normalize14"/>
        <output-file compare="Fragment">normalize14.out</output-file>
      </test-case>
      <test-case name="normalize5" FilePath="unicode/normalize">
        <query name="normalize5"/>
        <output-file compare="Fragment">normalize5.out</output-file>
      </test-case>
      <test-case name="normalize16" FilePath="unicode/normalize">
        <query name="normalize16"/>
        <output-file compare="Fragment">normalize16.out</output-file>
      </test-case>
      <test-case name="normalize17" FilePath="unicode/normalize">
        <query name="normalize17"/>
        <output-file compare="Fragment">normalize17.out</output-file>
      </test-case>
      <test-case name="normalize18" FilePath="unicode/normalize">
        <query name="normalize18"/>
        <output-file compare="Fragment">normalize18.out</output-file>
      </test-case>
    </test-group>
    <test-group name="casefold">
      <GroupInfo>
        <title>Tests for xqilla:casefold()</title>
      </GroupInfo>
      <test-case name="casefold1" FilePath="unicode/casefold">
        <query name="casefold1"/>
        <output-file compare="Fragment">casefold1.out</output-file>
      </test-case>
    </test-group>
    <test-group name="specialcasing">
      <GroupInfo>
        <title>Tests for specialcasing</title>
      </GroupInfo>
      <test-case name="specialcasing1" FilePath="unicode/specialcasing">
        <query name="specialcasing1"/>
        <output-file compare="Fragment">specialcasing1.out</output-file>
      </test-case>
    </test-group>
    <test-group name="words">
      <GroupInfo>
        <title>Tests for word bounding</title>
      </GroupInfo>
      <test-case name="words1" FilePath="unicode/words">
        <query name="words1"/>
        <output-file compare="Fragment">words1.out</output-file>
      </test-case>
    </test-group>
    <test-group name="sentences">
      <GroupInfo>
        <title>Tests for sentence bounding</title>
      </GroupInfo>
      <test-case name="sentences1" FilePath="unicode/sentences">
        <query name="sentences1"/>
        <output-file compare="Fragment">sentences1.out</output-file>
      </test-case>
    </test-group>
  </test-group>
  
</test-suite>